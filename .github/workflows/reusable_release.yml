name: Release it reusable workflow

on:
  workflow_call:
    inputs:
      release_it_command:
        type: string
        description: "Replace command for release-it"
        default: "npx release-it"
      release_it_args:
        type: string
        description: "Extra arguments for release-it"
      after_install_command:
        type: string
      check_if_should_release:
        type: boolean
        default: true
      backmerge:
        type: boolean
        default: true
    secrets:
      gpg_private_key:
      gpg_passphrase:
      checkout_token:
      npm_token:
      release_token:
      after_install_command:
    outputs:
      should_release:
        value: ${{ jobs.release_it.outputs.should_release }}
      prev_version:
        value: ${{ jobs.release_it.outputs.prev_version }}
      version:
        value: ${{ jobs.release_it.outputs.version }}

env:
  GIT_AUTHOR_NAME: github-actions[bot]
  GIT_AUTHOR_EMAIL: 41898282+github-actions[bot]@users.noreply.github.com

jobs:
  release_it:
    name: Release it
    runs-on: ubuntu-latest

    outputs:
      should_release: ${{ steps.should_release.outputs.value }}
      prev_version: ${{ steps.prev_version.outputs.value }}
      version: ${{ steps.version.outputs.value }}

    steps:
      - name: Increase watchers to fix Docker
        run: echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p

      - name: Checkout the repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.checkout_token || github.token }}

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version-file: package.json
          cache: yarn

      - name: Install dependencies
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 5
          max_attempts: 2
          retry_on: error
          command: yarn install --prefer-offline --frozen-lockfile --silent

      - name: Get previous version
        id: prev_version
        run: echo value=$(node -p "'v'+require('./package.json').version") >> $GITHUB_OUTPUT

      - name: Run after install command (secrets)
        run: ${{ secrets.after_install_command }}

      - name: Run after install command (inputs)
        if: inputs.after_install_command
        run: ${{ inputs.after_install_command }}

      - name: Import GPG key
        id: import_gpg
        if: env.GPG_PRIVATE_KEY && env.GPG_PASSPHRASE
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ env.GPG_PRIVATE_KEY }}
          passphrase: ${{ env.GPG_PASSPHRASE }}
          git_user_signingkey: true
          git_commit_gpgsign: true
          git_tag_gpgsign: true
          git_push_gpgsign: false
        env:
          GPG_PRIVATE_KEY: ${{ secrets.gpg_private_key }}
          GPG_PASSPHRASE: ${{ secrets.gpg_passphrase }}

      - name: Check if should release
        id: should_release
        if: inputs.check_if_should_release
        run: |
          if npx should-release-it; then
            echo "value=true" >> $GITHUB_OUTPUT
          else
            echo "value=false" >> $GITHUB_OUTPUT
          fi

      - name: Add npm token
        if: steps.should_release.outputs.value == 'true' && env.NPM_TOKEN
        run: npm config set //registry.npmjs.org/:_authToken $NPM_TOKEN
        env:
          NPM_TOKEN: ${{ secrets.npm_token }}

      - name: Release it
        id: release_it
        uses: mathiasvr/command-output@v2.0.0
        if: steps.should_release.outputs.value == 'true'
        with:
          run: ${{ inputs.release_it_command }} ${{ inputs.release_it_args }} -VV --ci ${{ (github.ref_name == 'beta' && '--preRelease=beta') || '' }}
        env:
          GITHUB_TOKEN: ${{ secrets.release_token || github.token }}
          GIT_COMMITTER_NAME: ${{ steps.import_gpg.outputs.name || env.GIT_AUTHOR_NAME }}
          GIT_COMMITTER_EMAIL: ${{ steps.import_gpg.outputs.email || env.GIT_AUTHOR_EMAIL }}

      - name: Get version
        id: version
        if: steps.should_release.outputs.value == 'true'
        run: echo value=$(node -p "'v'+require('./package.json').version") >> $GITHUB_OUTPUT

      - name: Perform backmerge from main into beta
        if: github.ref_name == 'main' && inputs.backmerge
        run: |
          git checkout -B main
          git checkout -B beta
          git rebase origin/main
          [[ `git status -s -uno` ]] && git commit -m "chore(release): merge main into beta [skip ci]"
          git push --no-verify origin HEAD:beta
        env:
          GIT_COMMITTER_NAME: ${{ steps.import_gpg.outputs.name || env.GIT_AUTHOR_NAME }}
          GIT_COMMITTER_EMAIL: ${{ steps.import_gpg.outputs.email || env.GIT_AUTHOR_EMAIL }}
